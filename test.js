const { canPass } = require('./maze');
const assert = require('assert');

const data = [
  {
    start: [0, 0],
    finish: [9, 5],
    result: true,
    maze: [
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
      [0, 0, 0, 1, 0, 0, 0, 1, 0, 1],
      [0, 1, 0, 0, 0, 1, 0, 0, 0, 1],
      [0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 1, 1, 1, 0, 1, 1, 1, 1, 1],
      [0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
      [0, 1, 1, 1, 1, 1, 0, 1, 0, 1],
      [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]
    ]
  }, {
    start: [0, 0],
    finish: [9, 5],
    result: false,
    maze: [
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
      [0, 0, 0, 1, 0, 0, 0, 1, 0, 1],
      [0, 1, 0, 0, 0, 1, 0, 0, 0, 1],
      [0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 1, 1, 1, 0, 1, 1, 1, 1, 1],
      [0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
      [0, 1, 1, 1, 1, 1, 0, 1, 0, 1],
      [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]
    ]
  }, {
    start: [0, 0],
    finish: [9, 9],
    result: true,
    maze: [
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
      [0, 0, 0, 1, 0, 0, 0, 1, 0, 1],
      [0, 1, 0, 0, 0, 1, 0, 0, 0, 1],
      [0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 1, 1, 1, 0, 1, 1, 1, 1, 1],
      [0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
      [0, 1, 1, 1, 1, 1, 0, 1, 0, 1],
      [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]
    ]
  }, {
    start: [0, 0],
    finish: [9, 9],
    result: false,
    maze: [
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
      [0, 0, 0, 1, 0, 0, 0, 1, 0, 1],
      [0, 1, 0, 0, 0, 1, 0, 0, 0, 1],
      [0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 1, 1, 1, 0, 1, 1, 1, 1, 1],
      [0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
      [0, 1, 1, 1, 1, 1, 0, 1, 0, 1],
      [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]
    ]
  }, {
    start: [0, 0],
    finish: [9, 9],
    result: true,
    maze: [
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
      [0, 0, 0, 1, 0, 0, 0, 1, 0, 1],
      [0, 1, 0, 0, 0, 1, 0, 0, 0, 1],
      [0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 1, 1, 1, 0, 1, 1, 1, 1, 1],
      [0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
      [0, 1, 1, 1, 1, 1, 0, 1, 0, 1],
      [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]
    ]
  }
];

describe('canPass', () => {

  data.forEach(cell => {

    let str = '\n';
    const maze = Array.from(cell.maze);
    maze[cell.start[1]][cell.start[0]] = 8;
    maze[cell.finish[1]][cell.finish[0]] = 8;
    maze.forEach(row => {
      str += JSON.stringify(row);
      str += '\n';
    });

    it(`should return '${cell.result}' when the maze is ${str}`, () => {
      assert.equal(false, canPass(
        cell.start,
        cell.finish,
        cell.maze
      ));
    });
  });
});
